mp.jwt.verify.publickey.location=/META-INF/public_key.pem
mp.jwt.verify.issuer=EPF
#
mp.messaging.connector.liberty-kafka.bootstrap.servers=localhost:9092
#
mp.messaging.incoming.persistence-EntityListeners.connector=liberty-kafka
mp.messaging.incoming.persistence-EntityListeners.topic=epf.persistence
mp.messaging.incoming.persistence-EntityListeners.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.persistence-EntityListeners.value.deserializer=epf.messaging.util.io.ObjectDeserializer
mp.messaging.incoming.persistence-EntityListeners.group.id=epf-cache
#
mp.messaging.incoming.persistence-EntityListeners-PostLoad.connector=liberty-kafka
mp.messaging.incoming.persistence-EntityListeners-PostLoad.topic=epf.persistence.load
mp.messaging.incoming.persistence-EntityListeners-PostLoad.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.persistence-EntityListeners-PostLoad.value.deserializer=epf.messaging.util.io.ObjectDeserializer
mp.messaging.incoming.persistence-EntityListeners-PostLoad.group.id=epf-cache
#
mp.messaging.incoming.security.connector=liberty-kafka
mp.messaging.incoming.security.topic=epf.security
mp.messaging.incoming.security.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.security.value.deserializer=epf.messaging.util.io.ObjectDeserializer
mp.messaging.incoming.security.group.id=epf-cache