<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>openup</groupId>
        <artifactId>OpenUP-parent</artifactId>
        <version>1.0.0</version>
    </parent>
    <artifactId>EPF-tests</artifactId>
    <name>Eclipse Process Framework Iteration Tests</name>
    <!-- Define variables that will be substituted in server.xml and
         passed to the integration tests -->
    <properties>
        <httpPort>9080</httpPort>
        <httpsPort>9443</httpsPort>
        <httpWebPort>8080</httpWebPort>
        <httpsWebPort>8443</httpsWebPort>
        <!-- Jaeger configuration -->
        <liberty.env.JAEGER_SAMPLER_TYPE>const</liberty.env.JAEGER_SAMPLER_TYPE>
        <liberty.env.JAEGER_SAMPLER_PARAM>1</liberty.env.JAEGER_SAMPLER_PARAM>
		<liberty.env.epf_schedule_url>https://localhost:9443/schedule/schedule/</liberty.env.epf_schedule_url>
		<liberty.env.epf_config_url>https://localhost:9443/config/config/</liberty.env.epf_config_url>
		<liberty.env.epf_script_url>https://localhost:9443/script/script/</liberty.env.epf_script_url>
		<liberty.env.epf_file_url>https://localhost:9443/file/file/</liberty.env.epf_file_url>
		<liberty.env.epf_image_url>https://localhost:9443/image/image/</liberty.env.epf_image_url>
		<liberty.env.epf_rules_url>https://localhost:9443/rules/rules/</liberty.env.epf_rules_url>
		<liberty.env.epf_planning_url>https://localhost:9443/planning/planning/</liberty.env.epf_planning_url>
		<liberty.env.epf_persistence_url>https://localhost:9443/persistence/persistence/</liberty.env.epf_persistence_url>
		<liberty.env.epf_persistence_security_url>https://localhost:9443/persistence/security/</liberty.env.epf_persistence_security_url>
		<liberty.env.epf_schema_url>https://localhost:9443/persistence/schema/</liberty.env.epf_schema_url>
		<liberty.env.epf_security_url>https://localhost:9443/security/security/</liberty.env.epf_security_url>
        <liberty.env.epf_gateway_url>https://localhost:9443/gateway/</liberty.env.epf_gateway_url>
        <liberty.env.epf_messaging_url>ws://localhost:9080/messaging/messaging/</liberty.env.epf_messaging_url>
        <liberty.env.epf_lang_url>ws://localhost:9080/lang/lang/</liberty.env.epf_lang_url>
        <liberty.env.epf_cache_url>https://localhost:9443/cache/cache/</liberty.env.epf_cache_url>
        <liberty.env.epf_registry_url>https://localhost:9443/registry/registry/</liberty.env.epf_registry_url>
		<liberty.env.epf_management_url>https://localhost:9443/management/management/</liberty.env.epf_management_url>
		<liberty.env.epf_portlet_url>http://localhost:8080/pluto/portal</liberty.env.epf_portlet_url>
		<liberty.env.epf_webapp_url>https://localhost:9443/webapp/</liberty.env.epf_webapp_url>
		<liberty.env.epf_health_url>https://localhost:9443/health/</liberty.env.epf_health_url>
		<liberty.env.openup_delivery_processes_url>https://localhost:9443/delivery-processes/delivery-processes/</liberty.env.openup_delivery_processes_url>
		<liberty.env.openup_roles_url>https://localhost:9443/roles/roles/</liberty.env.openup_roles_url>
		<liberty.env.openup_tasks_url>https://localhost:9443/tasks/tasks/</liberty.env.openup_tasks_url>
		<liberty.env.openup_work_products_url>https://localhost:9443/work-products/work-products/</liberty.env.openup_work_products_url>
		<liberty.env.openup_gateway_url>https://localhost:9443/openup/gateway/</liberty.env.openup_gateway_url>
		<liberty.env.epf_tests_file_root>target/servers/test/epf.file.root</liberty.env.epf_tests_file_root>
		<liberty.env.epf_shell_path>../EPF-shell/target/appassembler/bin</liberty.env.epf_shell_path>
    </properties>
    <dependencies>
		<!-- https://mvnrepository.com/artifact/com.h2database/h2 -->
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
        </dependency>
		<!-- https://mvnrepository.com/artifact/com.hazelcast/hazelcast -->
        <dependency>
            <groupId>com.hazelcast</groupId>
            <artifactId>hazelcast</artifactId>
        </dependency>
		<!-- https://mvnrepository.com/artifact/org.eclipse.jetty.websocket/javax-websocket-client-impl -->
		<dependency>
		    <groupId>org.eclipse.jetty.websocket</groupId>
		    <artifactId>javax-websocket-client-impl</artifactId>
		    <scope>test</scope>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.glassfish/javax.json -->
		<dependency>
		    <groupId>org.glassfish</groupId>
		    <artifactId>javax.json</artifactId>
		    <scope>test</scope>
		</dependency>
		<!-- https://mvnrepository.com/artifact/javax.json/javax.json-api -->
		<dependency>
		    <groupId>javax.json</groupId>
		    <artifactId>javax.json-api</artifactId>
		    <scope>test</scope>
		</dependency>
		<!-- https://mvnrepository.com/artifact/javax.annotation/javax.annotation-api -->
		<dependency>
			<groupId>javax.annotation</groupId>
			<artifactId>javax.annotation-api</artifactId>
			<scope>provided</scope>
		</dependency>
		<!-- https://mvnrepository.com/artifact/jakarta.annotation/jakarta.annotation-api -->
		<dependency>
		    <groupId>jakarta.annotation</groupId>
		    <artifactId>jakarta.annotation-api</artifactId>
			<scope>provided</scope>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.eclipse/yasson -->
		<dependency>
		    <groupId>org.eclipse</groupId>
		    <artifactId>yasson</artifactId>
		    <scope>test</scope>
		</dependency>
		<dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-schema</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-client</artifactId>
            <version>${project.version}</version>
        </dependency>
		<dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-security-utility</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-portlet-client</artifactId>
            <version>${project.version}</version>
        </dependency>
		<dependency>
            <groupId>openup</groupId>
            <artifactId>OpenUP-portlet-client</artifactId>
            <version>${project.version}</version>
        </dependency>
		<dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-schedule</artifactId>
            <version>${project.version}</version>
            <type>war</type>
        </dependency>
		<dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-batch</artifactId>
            <version>${project.version}</version>
            <type>war</type>
        </dependency>
		<dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-script</artifactId>
            <version>${project.version}</version>
            <type>war</type>
        </dependency>
		<dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-config</artifactId>
            <version>${project.version}</version>
            <type>war</type>
        </dependency>
        <dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-messaging</artifactId>
            <version>${project.version}</version>
            <type>war</type>
        </dependency>
		<dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-logging</artifactId>
            <version>${project.version}</version>
            <type>war</type>
        </dependency>
		<dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-lang</artifactId>
            <version>${project.version}</version>
            <type>war</type>
        </dependency>
        <dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-cache</artifactId>
            <version>${project.version}</version>
            <type>war</type>
        </dependency>
		<dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-file</artifactId>
            <version>${project.version}</version>
            <type>war</type>
        </dependency>
		<dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-image</artifactId>
            <version>${project.version}</version>
            <type>war</type>
        </dependency>
        <dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-rules</artifactId>
            <version>${project.version}</version>
            <type>war</type>
        </dependency>
		<dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-planning</artifactId>
            <version>${project.version}</version>
            <type>war</type>
        </dependency>
		<dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-persistence</artifactId>
            <version>${project.version}</version>
            <type>war</type>
        </dependency>
		<dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-security</artifactId>
            <version>${project.version}</version>
            <type>war</type>
        </dependency>
		<dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-registry</artifactId>
            <version>${project.version}</version>
            <type>war</type>
        </dependency>
		<dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-management</artifactId>
            <version>${project.version}</version>
            <type>war</type>
        </dependency>
        <dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-gateway</artifactId>
            <version>${project.version}</version>
            <type>war</type>
        </dependency>
        <dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-webapp</artifactId>
            <version>${project.version}</version>
            <type>war</type>
        </dependency>
		<dependency>
            <groupId>openup</groupId>
            <artifactId>OpenUP-delivery-processes</artifactId>
            <version>${project.version}</version>
            <type>war</type>
        </dependency>
		<dependency>
            <groupId>openup</groupId>
            <artifactId>OpenUP-roles</artifactId>
            <version>${project.version}</version>
            <type>war</type>
        </dependency>
		<dependency>
            <groupId>openup</groupId>
            <artifactId>OpenUP-tasks</artifactId>
            <version>${project.version}</version>
            <type>war</type>
        </dependency>
		<dependency>
            <groupId>openup</groupId>
            <artifactId>OpenUP-work-products</artifactId>
            <version>${project.version}</version>
            <type>war</type>
        </dependency>
		<dependency>
            <groupId>openup</groupId>
            <artifactId>OpenUP-gateway</artifactId>
            <version>${project.version}</version>
            <type>war</type>
        </dependency>
        <dependency>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-rt-rs-mp-client</artifactId>
		    <scope>test</scope>
        </dependency>
        <dependency>
		    <groupId>org.apache.cxf</groupId>
		    <artifactId>cxf-rt-rs-sse</artifactId>
		    <scope>test</scope>
		</dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.jaxrs</groupId>
            <artifactId>jackson-jaxrs-json-provider</artifactId>
		    <scope>test</scope>
        </dependency>
        <dependency>
		    <groupId>org.jboss.weld</groupId>
		    <artifactId>weld-junit4</artifactId>
			<scope>test</scope>
		</dependency>
        <dependency>
		    <groupId>org.seleniumhq.selenium</groupId>
		    <artifactId>selenium-java</artifactId>
			<scope>test</scope>
		</dependency>
    </dependencies>
    <build>
        <!-- Enable resource filtering so that variables in server.xml get substituted -->
        <testResources>
            <testResource>
                <directory>${project.basedir}/src/test/resources</directory>
                <filtering>true</filtering>
            </testResource>
        </testResources>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <!-- Prevent surefire from executing integration tests as unit tests -->
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <configuration>
                    <!-- Pass contextPath and httpPort to the integration tests -->
                    <systemPropertyVariables>
						<epf.schedule.url>https://localhost:${httpsPort}/schedule/schedule/</epf.schedule.url>
						<epf.config.url>https://localhost:${httpsPort}/config/config/</epf.config.url>
						<epf.script.url>https://localhost:${httpsPort}/script/script/</epf.script.url>
						<epf.file.url>https://localhost:${httpsPort}/file/file/</epf.file.url>
						<epf.image.url>https://localhost:${httpsPort}/image/image/</epf.image.url>
						<epf.rules.url>https://localhost:${httpsPort}/rules/rules/</epf.rules.url>
						<epf.planning.url>https://localhost:${httpsPort}/planning/planning/</epf.planning.url>
						<epf.persistence.url>https://localhost:${httpsPort}/persistence/persistence/</epf.persistence.url>
						<epf.persistence.security.url>https://localhost:${httpsPort}/persistence/security/</epf.persistence.security.url>
						<epf.schema.url>https://localhost:${httpsPort}/persistence/schema/</epf.schema.url>
						<epf.security.url>https://localhost:${httpsPort}/security/security/</epf.security.url>
                        <epf.gateway.url>https://localhost:${httpsPort}/gateway/</epf.gateway.url>
                        <epf.registry.url>https://localhost:${httpsPort}/registry/registry/</epf.registry.url>
						<epf.management.url>https://localhost:${httpsPort}/management/management/</epf.management.url>
                        <epf.messaging.url>ws://localhost:${httpPort}/messaging/messaging/</epf.messaging.url>
                        <epf.lang.url>ws://localhost:9080/lang/lang/</epf.lang.url>
                        <epf.cache.url>https://localhost:${httpsPort}/cache/cache/</epf.cache.url>
                        <epf.portlet.url>http://localhost:${httpWebPort}/pluto/portal</epf.portlet.url>
                        <epf.webapp.url>https://localhost:${httpsPort}/webapp/</epf.webapp.url>
                        <epf.health.url>https://localhost:${httpsPort}/health/</epf.health.url>
						<openup.delivery_processes.url>https://localhost:${httpsPort}/delivery-processes/delivery-processes/</openup.delivery_processes.url>
						<openup.roles.url>https://localhost:${httpsPort}/roles/roles/</openup.roles.url>
						<openup.tasks.url>https://localhost:${httpsPort}/tasks/tasks/</openup.tasks.url>
						<openup.work_products.url>https://localhost:${httpsPort}/work-products/work-products/</openup.work_products.url>
						<openup.gateway.url>https://localhost:${httpsPort}/openup/gateway/</openup.gateway.url>
                        <epf.shell.path>../EPF-shell/target/appassembler/bin</epf.shell.path>
                        <webdriver.gecko.driver>${geckodriver}</webdriver.gecko.driver>
                        <epf.tests.file.root>target/servers/test/epf.file.root</epf.tests.file.root>
                        <epf.tests.shell.command>${command}</epf.tests.shell.command>
                        <webdriver.timeouts.implicit>60</webdriver.timeouts.implicit>
                        <webdriver.firefox.headless>true</webdriver.firefox.headless>
                    </systemPropertyVariables>
                </configuration>
            </plugin>
            <plugin>
                <groupId>io.openliberty.tools</groupId>
                <artifactId>liberty-maven-plugin</artifactId>
                <executions>
                    <!-- Create server with custom server.xml -->
                    <execution>
                        <id>create-server</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>create</goal>
                        </goals>
                        <configuration>
                            <!-- Use server.xml from target/ directory with variables replaced -->
                            <serverXmlFile>${project.build.testOutputDirectory}/wlp/server.xml</serverXmlFile>
                        </configuration>
                    </execution>
                    <!-- Install application in <dependencies/> into apps/ directory -->
                    <execution>
                        <id>install-apps</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>deploy</goal>
                        </goals>
                        <configuration>
                            <!-- Drop application into apps/ directory -->
                            <appsDirectory>apps</appsDirectory>
							<copyDependencies>
                                <location>${project.build.directory}/shared/resources/epf/</location>
                                <dependency>
                                    <groupId>com.h2database</groupId>
                                    <artifactId>h2</artifactId>
                                </dependency>
                                <dependency>
                                    <groupId>com.hazelcast</groupId>
                                    <artifactId>hazelcast</artifactId>
                                </dependency>
                            </copyDependencies>
                        </configuration>
                    </execution>
                    <!-- Start the server -->
                    <execution>
                        <id>start-liberty-server</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>start</goal>
                        </goals>
                        <configuration>
                            <verifyTimeout>600</verifyTimeout>
                            <serverStartTimeout>600</serverStartTimeout>
                            <applications>EPF-schedule,EPF-script,EPF-config,EPF-messaging,EPF-logging,EPF-batch,EPF-cache,EPF-file,EPF-image,EPF-rules,EPF-planning,EPF-persistence,EPF-registry,EPF-management,EPF-gateway,OpenUP-delivery-processes,OpenUP-roles,OpenUP-tasks,OpenUP-work-products</applications>
                        </configuration>
                    </execution>
                    <!-- Stop the server -->
                    <execution>
                        <id>stop-liberty-server</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>stop</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <installDirectory>${liberty.install.dir}</installDirectory>
                    <userDirectory>${project.build.directory}</userDirectory>
                    <serverName>test</serverName>
                    <deployPackages>dependencies</deployPackages>
					<verifyTimeout>600</verifyTimeout>
					<serverStartTimeout>600</serverStartTimeout>
					<applications>EPF-schedule,EPF-script,EPF-config,EPF-messaging,EPF-logging,EPF-batch,EPF-cache,EPF-file,EPF-image,EPF-rules,EPF-planning,EPF-persistence,EPF-registry,EPF-management,EPF-gateway,OpenUP-delivery-processes,OpenUP-roles,OpenUP-tasks,OpenUP-work-products</applications>
                </configuration>
            </plugin>
			<plugin>
				<groupId>com.lazerycode.jmeter</groupId>
				<artifactId>jmeter-maven-plugin</artifactId>
				<executions>
					<!-- Generate JMeter configuration -->
					<execution>
						<id>configuration</id>
						<goals>
							<goal>configure</goal>
						</goals>
					</execution>
					<!-- Run JMeter tests -->
					<execution>
						<id>jmeter-tests</id>
						<goals>
							<goal>jmeter</goal>
						</goals>
					</execution>
					<!-- Fail build on errors in test -->
					<execution>
						<id>jmeter-check-results</id>
						<goals>
							<goal>results</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
        </plugins>
    </build>
    <profiles>
		<profile>
			<id>Linux</id>
			<activation>
				<os>
					<name>Linux</name>
				</os>
			</activation>
			<properties>
        		<geckodriver>./geckodriver</geckodriver>
        		<command>bash</command>
        		<opencv_java>/usr/share/java/opencv-420.jar</opencv_java>
        		<opencv_core>/usr/lib/x86_64-linux-gnu/libopencv_core.so</opencv_core>
			</properties>
		</profile>
		<profile>
			<id>Windows</id>
			<activation>
				<os>
					<family>windows</family>
				</os>
			</activation>
			<properties>
        		<geckodriver>./geckodriver.exe</geckodriver>
        		<command>powershell</command>
        		<opencv_java>C://Program Files/opencv/build/java/opencv-452.jar</opencv_java>
        		<opencv_core>C://Program Files/opencv/build/java/x64/opencv_java452.dll</opencv_core>
			</properties>
		</profile>
	</profiles>
</project>
